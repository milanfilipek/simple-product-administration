import path from 'path';
import fs from 'fs';
import { defaultAllowedOrigins } from 'vite';
let resolvedConfig;
let pluginConfig;
/**
 * Ensures the directory for `filePath` exists and writes `data` as a formatted JSON file.
 */
function writeJson(filePath, data) {
    let dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
    }
    fs.writeFileSync(filePath, JSON.stringify(data, null, '\t'));
}
/**
 * Once the HTTP server starts listening, generate a JSON file containing the dev server URL.
 * Also sets the Vite server's `origin` to the same URL for use elsewhere.
 */
function generateInfoFile(httpServer) {
    let infoFilePath = path.resolve(resolvedConfig.root, resolvedConfig.build.outDir, pluginConfig.infoFile);
    httpServer.on('listening', () => {
        let protocol = resolvedConfig.server.https ? 'https' : 'http';
        let host = resolvedConfig.server.host || 'localhost';
        let port = httpServer.address().port;
        let devServerUrl = `${protocol}://${host}:${port}`;
        writeJson(infoFilePath, { devServer: devServerUrl });
        // Update Vite server's origin field so other parts of Vite or downstream tools can pick it up
        resolvedConfig.server.origin = devServerUrl;
    });
    httpServer.on('close', () => {
        fs.rmSync(infoFilePath, { force: true });
    });
    process.on('SIGINT', () => {
        httpServer.close(() => process.exit(0));
    });
}
/**
 * Determines the default output directory under `www/assets`.
 */
function getDefaultOutDir() {
    let projectRoot = process.cwd();
    let wwwDirectory = path.join(projectRoot, 'www');
    let assetsDirectory = path.join(wwwDirectory, 'assets');
    if (!fs.existsSync(wwwDirectory)) {
        throw new Error(`The output directory "${assetsDirectory}" does not exist. Please set "build.outDir" in your Vite config.`);
    }
    return assetsDirectory;
}
export default function vitePluginNette(config = {}) {
    pluginConfig = {
        infoFile: config.infoFile ?? '.vite/nette.json',
        entry: config.entry,
    };
    return {
        name: 'vite-plugin-nette',
        config(userConfig) {
            let root = userConfig.root ?? 'assets';
            let protocol = userConfig.server?.https ? 'https' : 'http';
            let host = userConfig.server?.host || 'localhost';
            let entry;
            if (pluginConfig.entry) {
                entry = (Array.isArray(pluginConfig.entry) ? pluginConfig.entry : [pluginConfig.entry])
                    .map((entry) => path.resolve(root, entry));
            }
            return {
                root,
                base: userConfig.base ?? '',
                build: {
                    manifest: userConfig.build?.manifest ?? true,
                    outDir: userConfig.build?.outDir ?? getDefaultOutDir(),
                    assetsDir: userConfig.build?.assetsDir ?? '',
                    rollupOptions: {
                        input: entry,
                    },
                },
                server: {
                    cors: userConfig.server?.cors ?? {
                        origin: [
                            defaultAllowedOrigins,
                            `${protocol}://${host}`,
                        ],
                    },
                    origin: '', // will be overridden later in generateInfoFile()
                },
            };
        },
        configResolved(config) {
            resolvedConfig = config;
        },
        configureServer(devServer) {
            if (resolvedConfig.command === 'serve' && devServer.httpServer) {
                generateInfoFile(devServer.httpServer);
            }
        },
    };
}
